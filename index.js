const{Mutex:Mutex}=require("async-mutex"),roomMutex=new Mutex,express=require("express"),mongoose=require("mongoose"),bodyParser=require("body-parser"),moment=require("moment-timezone"),cors=require("cors"),WebSocket=require("ws"),http=require("http"),app=express(),PORT=process.env.PORT||3e3,jwt=require("jsonwebtoken");app.use(cors({origin:!0,credentials:!0})),app.use(bodyParser.json());const{mongoUrl:mongoUrl}=require("./dbConnection"),RoomModel=require("./models/roomsdata"),Message=require("./models/message"),badgeModel=require("./models/badges"),ColorsModel=require("./models/colors"),User=require("./models/user"),Offer=require("./models/offermodal"),Mods=require("./models/mods"),Banned=require("./models/banned"),PersonalMessage=require("./models/personalmessage"),userRoutes=require("./routes/userRoutes"),{connect:connect}=require("./models/user"),Notification=require("./models/notifications"),CoordinateModel=require("./models/coordinates"),PackageModel=require("./models/vip");Otp=require("./models/otp"),TransactionModel=require("./models/transactions"),PaymentDetailsModel=require("./models/PaymentDetails.Js"),ShopDetails=require("./models/shopdetails"),Custom=require("./models/custom"),webProducts=require("./models/webDetails"),(TermsAndConds=require("./models/terms"))(server=http.createServer(app));var nodemailer=require("nodemailer");const bcrypt=require("bcrypt");async function deletePerMessages(e){try{await PersonalMessage.deleteMany({$or:[{senderId:e},{recepientId:e}]})}catch(e){console.error("Error deleting messages:",e),res.status(500).json({message:"Internal server error"})}}async function deleteCoordinates(e){const s=await mongoose.startSession();s.startTransaction();try{const t=await RoomModel.find({coordinates:{$elemMatch:{email:e}}}).session(s);for(const s of t)s.coordinates=s.coordinates.filter((s=>s.email!==e)),await s.save();await s.commitTransaction(),s.endSession()}catch(e){await s.abortTransaction(),s.endSession(),console.error(e)}}async function mergedates(e,s){const t=moment().tz("Asia/Karachi"),a=await ShopDetails.find({purchasedBy:e,itemId:s});var o=[];for(const e of a)o.push(e.validtill);await ShopDetails.deleteMany({_id:{$in:a.map((e=>e._id))}});const n=o.filter((e=>moment.tz(e,"Asia/Karachi").isSameOrAfter(t)));if(n.length>0){const a=n.reduce(((e,s)=>e+moment.tz(s,"Asia/Karachi").diff(t,"days")),0),o=t.add(a,"days"),r=o.format("YYYY-MM-DD HH:mm:ss"),i=o.format("DD-MM-YYYY"),c={itemId:s,purchasedBy:e,purchaseDate:moment().tz("Asia/Karachi").format("YYYY-MM-DD HH:mm:ss"),validtill:r},d=new ShopDetails(c);return await d.save(),i}return 0}async function removeUserFromFriends(e){try{const s=(await User.find({"friends.email":e})).map((async s=>{s.friends=s.friends.filter((s=>s.email!==e)),await s.save()}));return await Promise.all(s),!0}catch(e){throw console.error("Error removing user from friends' lists:",e),e}}async function deleteMessages(e){try{const s=await Message.find({messages:{$elemMatch:{user_id:e}}});if(s&&s.length>0){for(const t of s)t.messages=t.messages.filter((s=>s.user_id!==e)),await t.save();return 1}return 2}catch(e){return console.log("ERR"+e),0}}function genotp(){return Math.floor(9e4*Math.random())+1e4}var transporter=nodemailer.createTransport({service:"gmail",auth:{user:"Info.chatzyr@gmail.com",pass:"haan rydj ivyx adcr"}});function sendotp(e,s){try{Otp.deleteMany({user:e}).then((t=>{new Otp({user:e,code:s}).save().then((()=>{})).catch((e=>{console.error(e)}))})).catch((e=>{console.error(e)}));var t={from:"Info.chatzyr@gmail.com",to:e,subject:"üîê Verify Your Email for OTP",html:`\n            <html>\n                <head>\n                    <style>\n                        body {\n                            font-family: Arial, sans-serif;\n                            background-color: #f2f2f2;\n                        }\n                        .container {\n                            max-width: 600px;\n                            margin: 0 auto;\n                            padding: 20px;\n                            background-color: #ffffff;\n                            border-radius: 8px;\n                        }\n                        h1 {\n                            color: #007BFF;\n                            text-align: center;\n                        }\n                        p {\n                            color: #333;\n                            font-size: 16px;\n                            text-align: center;\n                        }\n                        .otp {\n                            font-size: 24px;\n                            font-weight: bold;\n                            color: #FF5733;\n                            text-align: center;\n                            margin-top: 20px;\n                        }\n                    </style>\n                </head>\n                <body>\n                    <div class="container">\n                        <h1>üîê Verify Your Email for ChatZyr </h1>\n                        <p>Hi there! Please verify your email to complete the OTP verification process.</p>\n                        <p>Your OTP: <span class="otp">${s}</span></p>\n                    </div>\n                </body>\n            </html>\n        `};return transporter.sendMail(t,(function(e,s){e&&console.log(e)})),s}catch(e){return console.log("Error Sending otp "+e),0}}async function verifyOtp(e,s){try{const t=await Otp.findOne({user:e});return t?t.code!==s?0:1:0}catch(e){return console.error("Error:",e),0}}function generateRandomString(){let e="";for(let s=0;s<7;s++){const s=Math.floor(62*Math.random());e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(s)}return e}function getlink(e){var s=e.indexOf("v=");if(-1!==s){s+=2;var t=e.indexOf("&",s);return-1!==t?e.substring(s,t):e.substring(s)}{const s=e.match(/youtu\.be\/(.*?)\?/);if(s){return s[1]}{const s=e.match(/live\/(.*?)\?/);return s?s[1]:null}}}mongoose.connect(mongoUrl,{useNewUrlParser:!0,useUnifiedTopology:!0}),mongoose.connection.on("connected",(()=>{console.log("DB connection successful")})),mongoose.connection.on("error",(e=>{console.log("DB connection failed",e)}));const wss=new WebSocket.Server({server:server}),roomDataMap=new Map,clientsMap=new Map;async function fetchAndSendUpdates(e,s){try{const t=await getfromdb(e,s),a=roomDataMap.get(e)||[];a.forEach((e=>{e.send(JSON.stringify(t))}))}catch(e){console.error("Error fetching and sending updates:",e)}}const connections=new Set;async function addservermessage(e,s){if(!(await User.find({email:e.user_id})).length>0)return null;const t=e,a=s,o=moment().tz("Asia/Karachi").format("YYYY-MM-DD HH:mm:ss");try{const e=await RoomModel.findOne({roomId:a});if(!e)throw console.error("Room not found"),new Error("Room not found");const s=t.user_id,r=e.coordinates.some((e=>e.email===s));var n=0;r?n=1:(e.coordinates.push({email:s,x:215,y:125}),await e.save());let i=await Message.findOne({room_id:a});if(i||(console.error("Room not found"),i=new Message({room_id:a,messages:[{user_id:t.user_id,content:t.content,time:o}]}),await i.save(),fetchAndSendUpdates(a)),i){i.messages=i.messages.filter((e=>"xxrp7"!==e.content));const e={user_id:t.user_id,content:t.content,time:o};if("xxrp7"==t.content)return fetchAndSendUpdates(a),null;if(i.messages.push(e),i.messages.length>60){const e=i.messages.length-60;i.messages.splice(0,e)}await i.save(),1==n?fetchAndSendUpdates(a,1):fetchAndSendUpdates(a)}}catch(e){console.error("Error:",e)}}async function getfromdb(e,t){if(1==t)try{const s=e;return{mess:(await Message.aggregate([{$match:{room_id:s}},{$project:{_id:0,room_id:1,messages:{$map:{input:"$messages",as:"message",in:{user_id:"$$message.user_id",content:"$$message.content",time:"$$message.time"}}}}}]))[0]}}catch(e){console.log("CANT FETCH MESSAGES "+e)}if(2==t)try{const t=(await RoomModel.aggregate([{$match:{roomId:e}},{$project:{_id:0,roomId:1,coordinates:{$map:{input:"$coordinates",as:"coord",in:{_id:"$$coord._id",email:"$$coord.email",x:"$$coord.x",y:"$$coord.y"}}}}}]))[0].coordinates;s=await Message.aggregate([{$match:{room_id:e}},{$project:{_id:0,room_id:1,messages:{$map:{input:"$messages",as:"message",in:{user_id:"$$message.user_id",content:"$$message.content",time:"$$message.time"}}}}}]);let a=[];s[0]&&(a=[...new Set(s[0].messages.map((e=>e.user_id)))]);return{coordinates:{coordinates:t,users:a}}}catch(e){console.log("Cannot fetch coordinates: "+e)}try{const s=e,t=await Message.aggregate([{$match:{room_id:s}},{$project:{_id:0,room_id:1,messages:{$map:{input:"$messages",as:"message",in:{user_id:"$$message.user_id",content:"$$message.content",time:"$$message.time"}}}}}]);let a=[];t[0]&&(a=[...new Set(t[0].messages.map((e=>e.user_id)))]);const o=await User.aggregate([{$match:{email:{$in:a}}},{$project:{_id:0,chatcolor:1,usernamecolor:1,username:1,password:1,email:1,badge:1,pic:1,backgroundPic:1,bio:1,likes:1,friends:1,premium:1}}]),n=await RoomModel.aggregate([{$match:{roomId:s}},{$project:{_id:0}}]),r=o.reduce(((e,s)=>{const{usernamecolor:t,chatcolor:a,username:o,password:n,email:r,badge:i,pic:c,backgroundPic:d,bio:m,likes:u,friends:l,premium:p}=s;return e[r]={chatcolor:a,usernamecolor:t,name:o,email:r,password:n,badge:i,pic:c,backgroundPic:d,bio:m,likes:u,friends:l,premium:p},e}),{}),i=(await RoomModel.aggregate([{$match:{roomId:e}},{$project:{_id:0,roomId:1,coordinates:{$map:{input:"$coordinates",as:"coord",in:{_id:"$$coord._id",email:"$$coord.email",x:"$$coord.x",y:"$$coord.y"}}}}}]))[0].coordinates;RoomModel.updateMany({},{$set:{users:a}}).then((e=>{})).catch((e=>{console.error("Error updating users:",e)})),RoomModel.updateMany({"coordinates.x":{$exists:!1},"coordinates.y":{$exists:!1}},{$set:{"coordinates.x":215,"coordinates.y":125}}).then((e=>{})).catch((e=>{console.error("Error updating coordinates:",e)}));const c=await Mods.aggregate([{$project:{_id:0}}]),d={...n[0],users:a,activemods:c},m={coordinates:i,users:a};return{mess:t[0],userdetails:r,roomdata:d,coordinates:m}}catch(e){throw console.error("Error in getfromdb:",e),e}}var roomids=[];async function updateCoordinatesWithRetry(e,s,t,a){const o=await RoomModel.findOne({roomId:e});if(!o)throw new Error("Room Not Found!");const n=o.coordinates.findIndex((e=>e.email===s));if(-1===n)throw new Error("User Not Found!");o.coordinates[n]?(o.coordinates[n].x=t,o.coordinates[n].y=a):o.coordinates[n]={email:s,x:t,y:a},await o.save(),fetchAndSendUpdates(e,2)}const activeUsers=new Map,inactivityTimeout=15e4;setInterval((()=>{const e=Date.now();activeUsers.forEach(((s,t)=>{e-s.lastActive>15e4&&activeUsers.delete(t)}))}),15e3);const userConnections=new Map;function authenticateToken(e,s,t){const a=e.headers.authorization;if(void 0===a)return s.sendStatus(401);jwt.verify(a,"Q$r2K6W8n!jCW%Zk",((a,o)=>{if(a)return s.sendStatus(403);e.user=o,t()}))}wss.on("connection",(e=>{connections.add(e),console.log("WebSocket client connected"),e.on("message",(async s=>{try{const t=JSON.parse(s);if("ping"==t.action){const s={msg:"pong"};e.send(JSON.stringify(s))}else if("getFriends"===t.action){const{userId:s}=t.data;try{const t=await User.findOne({email:s});if(!t)return res.status(404).json({message:"User not found"});const a=t.friends.map((e=>e.email)),o=await User.find({email:{$in:a}}),n=await Promise.all(o.map((async e=>{const t=await PersonalMessage.find({$or:[{senderId:s,recepientId:e.email},{senderId:e.email,recepientId:s}]}).sort({timeStamp:-1}).limit(1);return{...e.toObject(),lastMessage:t}})));e.send(JSON.stringify({friends:n}))}catch(e){console.error("Error fetching user friends:",e),res.status(500).json({message:"Internal server error"})}}else if("getNotifications"===t.action){const{recipientEmail:s}=t.data;activeUsers.set(s,{connection:e,lastActive:Date.now()});try{const t=await Notification.find({recipient:s,read:!1}).populate("sender");e.send(JSON.stringify({notifications:t}));const a=Array.from(activeUsers.keys());e.send(JSON.stringify({onlineusers:a}))}catch(e){console.error("Error fetching notifications:",e)}}else if("text"===t.messageType)try{const{senderId:s,recipientId:a,messageType:o,message:n}=t;userConnections.set(s,e);const r=userConnections.get(a),i=new PersonalMessage({senderId:s,recepientId:a,messageType:o,message:n,timestamp:new Date});await i.save(),e.readyState===WebSocket.OPEN&&e.send(JSON.stringify(i)),r&&r.readyState===WebSocket.OPEN&&(r.send(JSON.stringify(i)),await PersonalMessage.updateOne({_id:i._id},{$set:{read:!0}}));const c=await PersonalMessage.countDocuments({senderId:s,recepientId:a});if(c>40){const e=await PersonalMessage.findOne({$or:[{senderId:s,recepientId:a},{senderId:a,recepientId:s}]},{},{sort:{timestamp:1}});e&&await PersonalMessage.deleteOne({_id:e._id})}}catch(e){console.error("Error saving chat message:",e)}else if("pingdm"==t.action){const s={msg:"pong"};e.send(JSON.stringify(s))}else if("getMessages"===t.action){const{senderEmail:s,recipientEmail:a}=t.data,o=(await PersonalMessage.updateMany({$or:[{senderId:s,recepientId:a},{senderId:a,recepientId:s}],read:!1},{$set:{read:!0}}),await PersonalMessage.find({$or:[{senderId:s,recepientId:a},{senderId:a,recepientId:s}]}).sort({timestamp:1}));e.send(JSON.stringify(o))}else if("x"in t){const{roomId1:e,userId:s,x:a,y:o}=t;try{await updateCoordinatesWithRetry(e,s,a,o)}catch(e){console.error("Failed to update coordinates inside sockets",e)}}else if("roomId"in t){const s=t.roomId;roomMutex.runExclusive((async()=>{roomDataMap.has(s)||(roomDataMap.set(s,[]),roomids.push(s)),roomDataMap.get(s).push(e),roomids.push(s)})).then((()=>{const e=new Set(roomids),s=Array.from(e);roomids.length=0,roomids=[],s.forEach((e=>{fetchAndSendUpdates(e)}))}))}else"room_id"in t&&addservermessage(t.mymessage,t.room_id)}catch(e){console.error("Error parsing JSON:",e)}})),e.on("close",(()=>{roomDataMap.forEach(((s,t)=>{const a=s.indexOf(e);-1!==a&&s.splice(a,1)})),userConnections.forEach(((s,t)=>{s===e&&userConnections.delete(t)})),connections.delete(e),console.log("WebSocket client disconnected"),clientsMap.delete(e)}))})),app.use(userRoutes),app.get("/find-package",authenticateToken,(async(e,s)=>{const t=e.query.email;try{const e=await ShopDetails.find({purchasedBy:t});if(e){const t=[];for(const s of e){const e=s.itemId,a=await PackageModel.findOne({id:e});a&&t.push({title:a.title,validtill:s.validtill})}t.length>0?s.json(t):s.status(404).json({message:"No matching packages found"})}else s.status(404).json({message:"ShopDetails not found"})}catch(e){s.status(500).json({error:"Internal server error"})}})),app.put("/messages/mark-all-read/:user1/:user2",(async(e,s)=>{try{const{user1:t,user2:a}=e.params;s.json({message:"All unread messages between users marked as read"})}catch(e){console.error("Error marking messages as read:",e),s.status(500).json({message:"Internal server error"})}})),app.post("/unblockuser",authenticateToken,(async(e,s)=>{const{roomIdx:t,userIdx:a}=e.body;try{const e=await RoomModel.findOne({roomId:t});if(!e)return s.status(404).json({message:"Room not found"});const o=e.blocked.indexOf(a);return-1!==o?(e.blocked.splice(o,1),await e.save(),fetchAndSendUpdates(t),s.sendStatus(200)):s.sendStatus(404)}catch(e){return console.error(e),s.sendStatus(500)}})),app.post("/verotp",(async(e,s)=>{try{await verifyOtp(e.body.email,e.body.otp)?s.sendStatus(200):s.sendStatus(203)}catch(e){return console.log(e),s.status(500)}})),app.get("/webDetails",(async(e,s)=>{try{const e=await webProducts.find();s.json(e)}catch(e){console.error("Error fetching web details:",e),s.status(500).send("Error fetching web details")}})),app.get("/terms",(async(e,s)=>{try{const e=await TermsAndConds.find();s.json(e)}catch(e){s.status(500).json({message:e.message})}})),app.post("/sendOrderEmail",((e,s)=>{const{prodname:t,price:a,orderID:o,orderDetails:n}=e.body,r={from:n.email,to:"chatzyr@gmail.com",subject:"New Order",text:`New order received!\nDetails:\nOrder ID: ${o}\nName: ${n.name}\nEmail: ${n.email}\nProduct: ${t}\nPrice: $${a}`};transporter.sendMail(r,((e,t)=>{e?(console.log(e),s.status(500).send("Error")):s.send("Email sent")}))})),app.post("/sendcoin",authenticateToken,(async(e,s)=>{const{sendby:t,sendto:a,amount:o}=e.body,n=await mongoose.startSession();if(t===a)return s.sendStatus(203),0;try{await n.withTransaction((async()=>{const e=await User.findOne({email:t}).session(n),r=await User.findOne({email:a}).session(n);if(!e||!r)return s.sendStatus(203),r||console.log("User Not Found Receiver "),null;if(e.balance<o)return s.sendStatus(205),null;var i=parseFloat(parseFloat(e.balance)-parseFloat(o));e.balance=i.toString(),await e.save();var c=parseFloat(parseFloat(r.balance)+parseFloat(o));r.balance=c.toString(),await r.save()})),s.sendStatus(200)}catch(e){n.inTransaction()&&await n.abortTransaction()}finally{n.endSession()}})),app.post("/buyitem",authenticateToken,(async(e,s)=>{const t=await mongoose.startSession();t.startTransaction();try{const o=moment().tz("Asia/Karachi").format("YYYY-MM-DD HH:mm:ss"),{itemid:n,userid:r,type:i,price:c,duration:d}=e.body,m=await User.findOne({email:r}).session(t);if(!m)throw new Error("User not found");if(c<=m.balance){const e=await PackageModel.findOne({id:n}).session(t);if(!e)throw new Error("Shop item noot found");if("badge"===i){m.badge=e.id;try{const s=await Custom.findOne({userid:r}).session(t);if(s)s.badges.push(e.id),await s.save();else{const s={userid:r,badges:[e.id],colors:[]},t=new Custom(s);await t.save()}}catch(e){console.error("Error:",e)}}else if("chatcolor"===i){console.log("in color"),m.chatcolor=e.id;try{const s=await Custom.findOne({userid:r}).session(t);if(s)s.colors.push(e.id),await s.save(),console.log("ALL SET COLOR xx");else{const s={userid:r,badges:[],colors:[e.id]},t=new Custom(s);await t.save(),console.log("ALL SET COLOR")}}catch(e){console.error("Error:",e)}}else"namecolor"===i?m.namecolor=e.id:("vip2"===i||"vip3"===i)&&(m.premium=e.type);m.balance-=c,await m.save();var a={};if("1 Month"==d){const e=moment(o,"YYYY-MM-DD HH:mm:ss").add(30,"days");a={itemId:n,purchasedBy:r,purchaseDate:o,validtill:e.format("YYYY-MM-DD HH:mm:ss")}}if("3 Months"==d){const e=moment(o,"YYYY-MM-DD HH:mm:ss").add(90,"days");a={itemId:n,purchasedBy:r,purchaseDate:o,validtill:e.format("YYYY-MM-DD HH:mm:ss")}}if("6 Months"==d){const e=moment(o,"YYYY-MM-DD HH:mm:ss").add(180,"days");a={itemId:n,purchasedBy:r,purchaseDate:o,validtill:e.format("YYYY-MM-DD HH:mm:ss")}}if("1 Year"==d){const e=moment(o,"YYYY-MM-DD HH:mm:ss").add(364,"days");a={itemId:n,purchasedBy:r,purchaseDate:o,validtill:e.format("YYYY-MM-DD HH:mm:ss")}}const u=new ShopDetails(a);await u.save();const l=await mergedates(r,n);0!=l?(s.status(200).json({date:l,title:e.title}),await t.commitTransaction(),t.endSession()):(s.sendStatus(202),await t.commitTransaction(),t.endSession())}else s.sendStatus(202),await t.commitTransaction(),t.endSession()}catch(e){await t.abortTransaction(),t.endSession(),console.error(e),s.sendStatus(400)}})),app.get("/api/packages",authenticateToken,(async(e,s)=>{try{const e=await PackageModel.find();s.json(e)}catch(e){console.error("Error fetching packages:",e),s.status(500).json({error:"An error occurred while fetching packages"})}})),app.post("/sendotp",(async(e,s)=>{try{var t=sendotp(e.body.email,genotp());0!=t&&s.json({otp:t})}catch(e){return console.log(e),s.status(500)}})),app.post("/resetpassword",(async(e,s)=>{try{const{email:t,password:a}=e.body,o=await bcrypt.hash(a,10),n=await User.findOne({email:t});if(!n)throw s.sendStatus(202),new Error("User not found");n.password=o,await n.save(),s.sendStatus(200)}catch(e){return console.log(e),s.status(500)}})),app.post("/storesms",(async(e,s)=>{const t=moment().tz("Asia/Karachi").format("YYYY-MM-DD HH:mm:ss");for(var a=0;a<e.body.length;a++){var o=e.body[a],n=o["Trx ID"];const s={transaction_id:n=n.replace("Trx ID ",""),amount:o.Amount,time:t};new TransactionModel(s).save().catch((e=>{e.message.includes("duplicate key")}))}s.sendStatus(200)})),app.get("/find-transaction/:transaction_id",authenticateToken,(async(e,s)=>{const t=await mongoose.startSession();t.startTransaction();try{const a=e.params.transaction_id,o=e.query.userEmail,n=await TransactionModel.findOne({transaction_id:a}).session(t);if(!n)return await t.abortTransaction(),t.endSession(),s.status(404).json({message:"Transaction not found"});if("verified"===n.status){n.status="done",n.email=o;const e=await User.findOne({email:o}).session(t);return e?(e.balance+=parseFloat(n.amount),await Promise.all([e.save({session:t}),n.save({session:t})]),await t.commitTransaction(),t.endSession(),s.status(200).json({amount:e.balance})):(await t.abortTransaction(),t.endSession(),s.status(404).json({message:"User not found"}))}return await t.abortTransaction(),t.endSession(),s.status(403).json({message:"Transaction is not verified"})}catch(e){return console.error(e),await t.abortTransaction(),t.endSession(),s.status(500).json({message:"Internal server error"})}})),app.get("/api/payment-details",authenticateToken,(async(e,s)=>{try{const e=await PaymentDetailsModel.findOne({});if(!e)return s.status(404).json({error:"Payment details not found"});s.json(e)}catch(e){return s.status(500).json({error:"Internal Server Error"})}})),app.get("/find-transactions/:email",authenticateToken,(async(e,s)=>{try{const t=e.params.email,a=await TransactionModel.find({email:t,status:"done"});if(0===a.length)return s.status(404).json({message:'No transactions found with status "done" for the specified email.'});s.status(200).json(a)}catch(e){console.error(e),s.status(500).json({message:"Internal server error"})}})),app.get("/fetchver",authenticateToken,(async(e,s)=>{try{t={version:"1.0.0",link:"https://www.chatzyr.net/"},s.json(t)}catch(e){console.error("Error:",e),s.status(500).json({error:"Internal server error"})}})),app.get("/fetchData",authenticateToken,(async(e,s)=>{try{const e=await RoomModel.find(),t=await Offer.aggregate([{$project:{_id:0,__v:0}}]),a=await Mods.aggregate([{$project:{_id:0,__v:0}}]),o=await Banned.aggregate([{$project:{_id:0,__v:0}}]),n={documents:e,offer:t[0],mymods:a,banned:o};s.json(n)}catch(e){console.error("Error:",e),s.status(500).json({error:"Internal server error"})}})),app.post("/fetchcolors",authenticateToken,(async(e,s)=>{const{userid:t}=e.body.a;try{const e=await User.find({email:t},{_id:0,chatcolor:1,premium:1}),a={allcolors:await ColorsModel.aggregate([{$project:{_id:0,__v:0}}]),premium:e[0]};s.status(200).json(a)}catch(e){console.log(e),s.status(500).json({error:"Internal Server Error"})}})),app.post("/updatebackgroundpic",authenticateToken,(async(e,s)=>{const t=await mongoose.startSession();t.startTransaction();try{const{useremail:a,profileurl:o}=e.body.imgdata,n=await User.findOneAndUpdate({email:a},{backgroundPic:o},{new:!0}).session(t);await t.commitTransaction(),t.endSession(),s.json({message:"Profile Pic updated successfully",user:n})}catch(e){await t.abortTransaction(),t.endSession(),console.error(e),s.status(500).json({message:"An error occurred"})}})),app.get("/users/:email/profile",authenticateToken,(async(e,s)=>{try{const t=e.params.email,a=await User.findOne({email:t});if(!a)return s.status(404).json({message:"User not found"});s.status(200).json(a)}catch(e){console.error(e),s.status(500).json({message:"Server error"})}app.put("/users/:email/updateprofile",(async(e,s)=>{try{const t=e.params.email,{username:a,bio:o}=e.body,n=await User.findOne({email:t});if(!n)return s.status(404).json({message:"User not found"});n.username=a,n.bio=o,await n.save(),s.status(200).json({message:"User updated successfully"})}catch(e){console.error(e),s.status(500).json({message:"Server error"})}}))})),app.post("/users/:userId/increment-likes",authenticateToken,(async(e,s)=>{const{userId:t}=e.params,{user:a}=e.body;try{const e=await User.findOne({email:t});return e?e.likedBy.includes(a)?s.status(400).json({message:"You have already liked this profile"}):(e.likes+=1,e.likedBy.push(a),await e.save(),s.status(200).json({user:e})):s.status(404).json({message:"User not found"})}catch(e){return console.error(e),s.status(500).json({message:"Internal server error"})}})),app.post("/warning-notifications",authenticateToken,(async(e,s)=>{try{const{sender:t,recipients:a,message:o,type:n,pic:r}=e.body,i=a.map((async e=>{if(null===e||""==e);else try{const s=new Notification({sender:t,recipient:e,message:o,type:n,pic:r});return await s.save(),s}catch(e){}}));await Promise.all(i),s.status(201).json({message:"Notifications created"})}catch(e){console.error(e),s.status(500).json({message:"Internal server error"})}})),app.post("/loadcustom",authenticateToken,(async(e,s)=>{const t=e.body.email,a=await mongoose.startSession();a.startTransaction();try{const e=await Custom.aggregate([{$match:{userid:t}},{$project:{_id:0}}]).session(a);await a.commitTransaction(),a.endSession(),s.json(e[0])}catch(e){await a.abortTransaction(),a.endSession(),console.error(e),s.status(500).json({message:"An error occurred"})}})),app.post("/notifications",authenticateToken,(async(e,s)=>{try{const{sender:t,recipient:a,message:o,type:n}=e.body;if("friendRequest"===n){const e=await User.findOne({email:a});if(e&&e.friends.some((e=>e.email===t)))return s.status(200).json({message:"You are already friends with this user"});{if(await Notification.findOne({sender:t,recipient:a,type:"friendRequest",read:!1}))return s.status(202).json({message:"Friend request already sent"});const e=await User.findOne({email:t}),r=new Notification({sender:t,recipient:a,message:` ${e.username} ${o}`,type:n,pic:e.pic});await r.save(),s.status(201).json({message:"Notification created"})}}if("profileLike"===n){await User.findOne({email:a});const e=await User.findOne({email:t}),r=new Notification({sender:t,recipient:a,message:`${e.username} ${o}`,type:n,pic:e.pic});await r.save(),s.status(201).json({message:"Notification created"})}if("coins"===n){await User.findOne({email:a});const e=await User.findOne({email:t}),r=new Notification({sender:t,recipient:a,message:`${e.username} ${o}`,type:n,pic:e.pic});await r.save(),s.status(201).json({message:"Notification created"})}}catch(e){console.error(e),s.status(500).json({message:"Internal server error"})}})),app.post("/addfriend",authenticateToken,(async(e,s)=>{const{username:t,useremail:a,friendUsername:o,friendEmail:n}=e.body;try{const e=await User.findOne({email:a});if(!e)return s.status(404).json({error:"Sender not found"});const r=await User.findOne({email:n});if(!r)return s.status(404).json({error:"Receiver not found"});const i={username:o,email:n},c={username:t,email:e.email};e.friends.push(i),r.friends.push(c),await e.save(),await r.save(),s.status(200).json({message:"Friend added successfully"})}catch(e){console.error(e),s.status(500).json({error:"Internal server error"})}})),app.put("/updateposition",(async(e,s)=>{try{const{roomId1:t,userId:a,x:o,y:n}=e.body,r=await RoomModel.findOne({roomId:t});if(!r)return s.status(404).json({error:"Room not found"});const i=r.users.findIndex((e=>e===a));if(-1===i)return s.status(404).json({error:"User not found in the room"});r.coordinates[i]?(r.coordinates[i].x=o,r.coordinates[i].y=n):r.coordinates[i]={email:a,x:o,y:n},await r.save(),s.status(200).json({message:"User position updated successfully"})}catch(e){console.error(e),s.status(500).json({error:"Internal server error"})}})),app.get("/getusercoordinates",authenticateToken,(async(e,s)=>{try{const{roomId:t,userEmails:a}=e.query;if(!Array.isArray(a))return s.status(400).json({error:"Invalid userEmails parameter"});const o=await RoomModel.findOne({roomId:t});if(!o)return s.status(404).json({error:"Room not found"});const n=o.coordinates.filter((e=>a.includes(e.email))).map((e=>({x:e.x,y:e.y,email:e.email})));if(0===n.length)return s.status(404).json({error:"No matching users found in the room"});s.status(200).json(n)}catch(e){console.error(e),s.status(500).json({error:"Internal server error"})}})),app.put("/notifications/:notificationId/mark-as-read",(async(e,s)=>{const{notificationId:t}=e.params;try{const e=await Notification.findByIdAndUpdate(t,{read:!0},{new:!0});if(!e)return s.status(404).json({error:"Notification not found"});s.status(200).json({message:"Notification marked as read",notification:e})}catch(e){console.error("Error marking notification as read:",e),s.status(500).json({error:"Internal server error"})}})),app.post("/changecolor",authenticateToken,(async(e,s)=>{const{user:t,hex:a}=e.body.det;try{return await User.findOneAndUpdate({email:t},{chatcolor:a},{new:!0})?s.status(200).json({message:"Color updated successfully"}):s.status(404).json({error:"User not found"})}catch(e){return console.error("Error updating color: "+e),s.status(500).json({error:"An error occurred while updating the color"})}})),app.post("/changeusernamecolor",authenticateToken,(async(e,s)=>{const{user:t,hex:a}=e.body.det;try{return await User.findOneAndUpdate({email:t},{usernamecolor:a},{new:!0})?s.sendStatus(200):s.sendStatus(404)}catch(e){return console.error("Error updating color: "+e),s.status(500).json({error:"An error occurred while updating the color"})}})),app.post("/muteuser",authenticateToken,(async(e,s)=>{const{u:t,t:a,roomid:o}=e.body.mutedata;try{const e=await RoomModel.find({});if(e&&e.length>0){for(const s of e)s.muted.push(t),s.muted.push(a),s.save(),fetchAndSendUpdates(s.roomId);s.status(200).send("User muted in all rooms!")}else s.status(404).send("No rooms found")}catch(e){console.log("Error muting: "+e),s.status(500).send("Error muting: "+e)}})),app.post("/blockuser",authenticateToken,(async(e,s)=>{const{u:t,rx:a}=e.body.blockdata;try{const e=await mongoose.startSession();e.startTransaction();const o=await RoomModel.findOne({roomId:a});o&&(o.blocked.push(t),await o.save({session:e})),await e.commitTransaction(),e.endSession(),fetchAndSendUpdates(a),s.status(200).json({message:"User Blocked Successfully!"})}catch(e){console.error("Error Blocking User: "+e),s.status(500).json({error:"An error occurred while blocking the user."})}})),app.post("/createroom",authenticateToken,(async(e,s)=>{const{name:t,pic:a,bio:o,videoUrl:n,usern:r}=e.body.roombody;var i=getlink(n);i=null==i||""==i?"":"https://www.youtube.com/embed/"+i;try{const e=await mongoose.startSession();e.startTransaction();const n={email:r,x:215,y:125},c=generateRandomString(),d={roomId:c,name:t,coordinates:n,badgeurl:a,videourl:i,bio:o,mods:[r]},m=await RoomModel(d);await m.save({session:e});const u=moment().tz("Asia/Karachi").format("YYYY-MM-DD HH:mm:ss"),l=new Message({room_id:c,messages:[{user_id:r,content:"xxrp7",time:u},{user_id:r,content:"xxrp7",time:u},{user_id:r,content:"xxrp7",time:u}]});await l.save({session:e}),await e.commitTransaction(),e.endSession(),s.json({stat:200})}catch(e){console.log("Error Creating Room :  "+e)}})),app.post("/updatebadge",authenticateToken,(async(e,s)=>{const t=await mongoose.startSession();t.startTransaction();try{const{email:a,badgeUrl:o}=e.body.badgedata,n=await User.findOneAndUpdate({email:a},{badge:o},{new:!0}).session(t);await t.commitTransaction(),t.endSession(),s.json({message:"Badge updated successfully",user:n})}catch(e){await t.abortTransaction(),t.endSession(),console.error(e),s.status(500).json({message:"An error occurred"})}})),app.get("/notifications/:userId",authenticateToken,(async(e,s)=>{try{const{userId:t}=e.params,a=await Notification.find({recipient:t,read:!1}).populate("sender");s.status(200).json({notifications:a})}catch(e){console.error(e),s.status(500).json({message:"Internal server error"})}})),app.post("/updateprofilepic",authenticateToken,(async(e,s)=>{const t=await mongoose.startSession();t.startTransaction();try{const{useremail:a,profileurl:o}=e.body.imgdata,n=await User.findOneAndUpdate({email:a},{pic:o},{new:!0}).session(t);await t.commitTransaction(),t.endSession(),s.json({message:"Profile Pic updated successfully",user:n})}catch(e){await t.abortTransaction(),t.endSession(),console.error(e),s.status(500).json({message:"An error occurred"})}})),app.post("/loadbages",authenticateToken,(async(e,s)=>{const t=await mongoose.startSession();t.startTransaction();try{const e=await badgeModel.aggregate([{$match:{badgeid:"123"}},{$project:{_id:0}}]).session(t);await t.commitTransaction(),t.endSession(),s.json(e[0])}catch(e){await t.abortTransaction(),t.endSession(),console.error(e),s.status(500).json({message:"An error occurred"})}})),app.post("/updateroom",authenticateToken,(async(e,s)=>{const t=await mongoose.startSession();try{await t.withTransaction((async()=>{const{roomid:a,pic:o,name:n,bio:r,videoUrl:i}=e.body.roombody;var d=i;if(i.includes("embed")||(d=null==d||""==d||d.length<=6?"":"https://www.youtube.com/embed/"+(d=getlink(i))),c={},o&&(c.badgeurl=o),n&&(c.name=n),r&&(c.bio=r),i&&(c.videourl=d),!await RoomModel.findOneAndUpdate({roomId:a},{$set:c},{new:!0,session:t}))throw new Error("Room not found");s.json({stat:200})}))}catch(e){}finally{t.endSession()}})),app.get("/messages/:senderId/:recepientId",authenticateToken,(async(e,s)=>{try{const{senderId:t,recepientId:a}=e.params;console.log(t,a);const o=await PersonalMessage.find({$or:[{senderId:t,recepientId:a},{senderId:a,recepientId:t}]}).sort({timestamp:1});s.json(o)}catch(e){console.log(e),s.status(500).json({error:"Internal Server Error"})}})),app.post("/deleteroom",authenticateToken,(async(e,s)=>{const{roomid:t}=e.body;try{if(!await RoomModel.findOneAndDelete({roomId:t}))return s.status(404).json({error:"Room not found"});s.json({s:200})}catch(e){console.log("Room Deletion Failed: "+e),s.status(500).json({error:"Room Deletion Failed"})}})),app.post("/removeprofilepic",authenticateToken,(async(e,s)=>{const t=await mongoose.startSession();t.startTransaction();try{const{user:a}=e.body.a;await User.findOneAndUpdate({email:a},{pic:"https://cdn-icons-png.flaticon.com/512/3177/3177440.png"},{new:!0}).session(t);await t.commitTransaction(),t.endSession(),s.sendStatus(200)}catch(e){await t.abortTransaction(),t.endSession(),console.error(e),s.status(500).json({message:"An error occurred"})}})),app.post("/removebackpic",authenticateToken,(async(e,s)=>{const t=await mongoose.startSession();t.startTransaction();try{const{user:a}=e.body.a;await User.findOneAndUpdate({email:a},{backgroundPic:"https://as2.ftcdn.net/v2/jpg/01/68/74/87/1000_F_168748763_Mdv7zO7dxuECMzItERhPzWhVJSaORTKd.jpg"},{new:!0}).session(t);await t.commitTransaction(),t.endSession(),s.sendStatus(200)}catch(e){await t.abortTransaction(),t.endSession(),console.error(e),s.status(500).json({message:"An error occurred"})}})),app.post("/removebio",authenticateToken,(async(e,s)=>{const t=await mongoose.startSession();t.startTransaction();try{const{user:a}=e.body.a;await User.findOneAndUpdate({email:a},{bio:"Hi i am ChatZyr User!"},{new:!0}).session(t);await t.commitTransaction(),t.endSession(),s.sendStatus(200)}catch(e){await t.abortTransaction(),t.endSession(),console.error(e),s.status(500).json({message:"An error occurred"})}})),app.delete("/deleteAccount/:email",(async(e,s)=>{const{email:t}=e.params,a=await mongoose.startSession();a.startTransaction();try{await User.findOneAndDelete({email:t}).session(a),await Notification.deleteMany({$or:[{sender:t},{recipient:t}]}).session(a);const e=await Mods.findOne({$or:[{mod1:t},{mod2:t}]});e&&(e.mod1.includes(t)?e.mod1=e.mod1.filter((e=>e!==t)):e.mod2=e.mod2.filter((e=>e!==t)),await e.save()),removeUserFromFriends(t),deletePerMessages(t);await deleteMessages(t);deleteCoordinates(t),await a.commitTransaction(),a.endSession(),s.status(200).json({message:"User account and associated data deleted successfully."})}catch(e){await a.abortTransaction(),a.endSession(),console.error(e),s.status(500).json({error:"An error occurred while deleting the user account."})}})),app.get("/search",authenticateToken,(async(e,s)=>{const{query:t}=e.query;try{const e=await User.find({username:{$regex:t,$options:"i"}});s.json(e)}catch(e){console.error(e),s.status(500).json({error:"Internal server error"})}})),app.get("/user",authenticateToken,(async(e,s)=>{try{const t=e.query.email;if(!t)return s.status(400).json({message:"Email is required"});const a=await User.findOne({email:t});if(!a)return s.status(404).json({message:"User not found"});s.status(200).json(a)}catch(e){console.error(e),s.status(500).json({message:"Server error"})}})),server.listen(PORT,(()=>{console.log("Sockets Server listening on port "+PORT)}));
